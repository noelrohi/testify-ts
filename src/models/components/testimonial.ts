/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Testimonial = {
  id: string;
  authorName: string;
  text: string;
  socialUrl: string;
  imageUrl: string | null;
  createdAt: string;
  updatedAt: string;
  isPublished: boolean;
  spaceId: string;
};

/** @internal */
export const Testimonial$inboundSchema: z.ZodType<
  Testimonial,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  authorName: z.string(),
  text: z.string(),
  socialUrl: z.string(),
  imageUrl: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
  isPublished: z.boolean(),
  spaceId: z.string(),
});

/** @internal */
export type Testimonial$Outbound = {
  id: string;
  authorName: string;
  text: string;
  socialUrl: string;
  imageUrl: string | null;
  createdAt: string;
  updatedAt: string;
  isPublished: boolean;
  spaceId: string;
};

/** @internal */
export const Testimonial$outboundSchema: z.ZodType<
  Testimonial$Outbound,
  z.ZodTypeDef,
  Testimonial
> = z.object({
  id: z.string(),
  authorName: z.string(),
  text: z.string(),
  socialUrl: z.string(),
  imageUrl: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
  isPublished: z.boolean(),
  spaceId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Testimonial$ {
  /** @deprecated use `Testimonial$inboundSchema` instead. */
  export const inboundSchema = Testimonial$inboundSchema;
  /** @deprecated use `Testimonial$outboundSchema` instead. */
  export const outboundSchema = Testimonial$outboundSchema;
  /** @deprecated use `Testimonial$Outbound` instead. */
  export type Outbound = Testimonial$Outbound;
}

export function testimonialToJSON(testimonial: Testimonial): string {
  return JSON.stringify(Testimonial$outboundSchema.parse(testimonial));
}

export function testimonialFromJSON(
  jsonString: string,
): SafeParseResult<Testimonial, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Testimonial$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Testimonial' from JSON`,
  );
}
