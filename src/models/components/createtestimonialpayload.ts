/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTestimonialPayload = {
  authorName: string;
  text: string;
  socialUrl: string;
  imageUrl: string | null;
  position?: string | null | undefined;
  companyName?: string | null | undefined;
};

/** @internal */
export const CreateTestimonialPayload$inboundSchema: z.ZodType<
  CreateTestimonialPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  authorName: z.string(),
  text: z.string(),
  socialUrl: z.string(),
  imageUrl: z.nullable(z.string()),
  position: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateTestimonialPayload$Outbound = {
  authorName: string;
  text: string;
  socialUrl: string;
  imageUrl: string | null;
  position?: string | null | undefined;
  companyName?: string | null | undefined;
};

/** @internal */
export const CreateTestimonialPayload$outboundSchema: z.ZodType<
  CreateTestimonialPayload$Outbound,
  z.ZodTypeDef,
  CreateTestimonialPayload
> = z.object({
  authorName: z.string(),
  text: z.string(),
  socialUrl: z.string(),
  imageUrl: z.nullable(z.string()),
  position: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTestimonialPayload$ {
  /** @deprecated use `CreateTestimonialPayload$inboundSchema` instead. */
  export const inboundSchema = CreateTestimonialPayload$inboundSchema;
  /** @deprecated use `CreateTestimonialPayload$outboundSchema` instead. */
  export const outboundSchema = CreateTestimonialPayload$outboundSchema;
  /** @deprecated use `CreateTestimonialPayload$Outbound` instead. */
  export type Outbound = CreateTestimonialPayload$Outbound;
}

export function createTestimonialPayloadToJSON(
  createTestimonialPayload: CreateTestimonialPayload,
): string {
  return JSON.stringify(
    CreateTestimonialPayload$outboundSchema.parse(createTestimonialPayload),
  );
}

export function createTestimonialPayloadFromJSON(
  jsonString: string,
): SafeParseResult<CreateTestimonialPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTestimonialPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTestimonialPayload' from JSON`,
  );
}
