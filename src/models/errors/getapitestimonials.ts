/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Internal Server Error.
 */
export type InternalServerErrorData = {
  error: string;
};

/**
 * Internal Server Error.
 */
export class InternalServerError extends Error {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: InternalServerErrorData;

  constructor(err: InternalServerErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "InternalServerError";
  }
}

/**
 * Bad Request - Invalid or missing spaceId.
 */
export type BadRequestErrorData = {
  error: string;
};

/**
 * Bad Request - Invalid or missing spaceId.
 */
export class BadRequestError extends Error {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: BadRequestErrorData;

  constructor(err: BadRequestErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "BadRequestError";
  }
}

/** @internal */
export const InternalServerError$inboundSchema: z.ZodType<
  InternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
})
  .transform((v) => {
    return new InternalServerError(v);
  });

/** @internal */
export type InternalServerError$Outbound = {
  error: string;
};

/** @internal */
export const InternalServerError$outboundSchema: z.ZodType<
  InternalServerError$Outbound,
  z.ZodTypeDef,
  InternalServerError
> = z.instanceof(InternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InternalServerError$ {
  /** @deprecated use `InternalServerError$inboundSchema` instead. */
  export const inboundSchema = InternalServerError$inboundSchema;
  /** @deprecated use `InternalServerError$outboundSchema` instead. */
  export const outboundSchema = InternalServerError$outboundSchema;
  /** @deprecated use `InternalServerError$Outbound` instead. */
  export type Outbound = InternalServerError$Outbound;
}

/** @internal */
export const BadRequestError$inboundSchema: z.ZodType<
  BadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
})
  .transform((v) => {
    return new BadRequestError(v);
  });

/** @internal */
export type BadRequestError$Outbound = {
  error: string;
};

/** @internal */
export const BadRequestError$outboundSchema: z.ZodType<
  BadRequestError$Outbound,
  z.ZodTypeDef,
  BadRequestError
> = z.instanceof(BadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestError$ {
  /** @deprecated use `BadRequestError$inboundSchema` instead. */
  export const inboundSchema = BadRequestError$inboundSchema;
  /** @deprecated use `BadRequestError$outboundSchema` instead. */
  export const outboundSchema = BadRequestError$outboundSchema;
  /** @deprecated use `BadRequestError$Outbound` instead. */
  export type Outbound = BadRequestError$Outbound;
}
